#include <sys>

const BIOS_MAJ_VER = 0;
const BIOS_MIN_VER = 1;
const BIOS_HOT_VER = 0;

const VIDEO_PX_WIDTH           = 320;
const VIDEO_PX_HEIGHT          = 240;
const VIDEO_BITS_PER_PX        =   1;
const VIDEO_WORDS_PER_SCANLINE = ((VIDEO_PX_WIDTH * VIDEO_BITS_PER_PX) / 16);
const VIDEO_SIZE_WORDS         = (VIDEO_WORDS_PER_SCANLINE * VIDEO_PX_HEIGHT);
auto  VIDEO[VIDEO_SIZE_WORDS];

const FONT_ATLAS_SIZE_WORDS = 380;
auto FONT_ATLAS[FONT_ATLAS_SIZE_WORDS] = {
	0xfffb, 0xfbfb, 0xfffb, 0xffff, 0xffeb, 0xebff,
	0xffff, 0xffff, 0xffeb, 0xc1eb, 0xc1eb, 0xffff,
	0xffc3, 0xe9c1, 0xcbe1, 0xffff, 0xffdd, 0xeff7,
	0xfbdd, 0xffff, 0xfff1, 0xfbd5, 0xedd3, 0xffff,
	0xfffb, 0xfbff, 0xffff, 0xffff, 0xfff7, 0xfbfb,
	0xfbf7, 0xffff, 0xfffb, 0xf7f7, 0xf7fb, 0xffff,
	0xffff, 0xebf7, 0xebff, 0xffff, 0xffff, 0xf7e3,
	0xf7ff, 0xffff, 0xffff, 0xffff, 0xfbfd, 0xffff,
	0xffff, 0xffe3, 0xffff, 0xffff, 0xffff, 0xffff,
	0xfffb, 0xffff, 0xffdf, 0xeff7, 0xfbfd, 0xffff,
	0xffe3, 0xddd5, 0xdde3, 0xffff, 0xfff7, 0xf3f7,
	0xf7e3, 0xffff, 0xffe1, 0xdfe3, 0xfdc1, 0xffff,
	0xffe1, 0xdfe3, 0xdfe1, 0xffff, 0xffdd, 0xddc1,
	0xdfdf, 0xffff, 0xffc1, 0xfde1, 0xdfe1, 0xffff,
	0xffe3, 0xfde1, 0xdde3, 0xffff, 0xffc1, 0xdfcf,
	0xdfdf, 0xffff, 0xffe3, 0xdde3, 0xdde3, 0xffff,
	0xffc3, 0xddc3, 0xdfdf, 0xffff, 0xffff, 0xfbff,
	0xfbff, 0xffff, 0xffff, 0xfbff, 0xfbfd, 0xffff,
	0xfff7, 0xfbfd, 0xfbf7, 0xffff, 0xffff, 0xe3ff,
	0xe3ff, 0xffff, 0xfffd, 0xfbf7, 0xfbfd, 0xffff,
	0xffe1, 0xdfe1, 0xfffd, 0xffff, 0xffe3, 0xcdd5,
	0xcdfb, 0xffff, 0xfff7, 0xebdd, 0xc1dd, 0xffff,
	0xfff1, 0xede1, 0xdde1, 0xffff, 0xffc3, 0xfdfd,
	0xfdc3, 0xffff, 0xffe1, 0xdddd, 0xdde1, 0xffff,
	0xffc1, 0xfde1, 0xfdc1, 0xffff, 0xffc1, 0xfde1,
	0xfdfd, 0xffff, 0xffc3, 0xfdcd, 0xddc3, 0xffff,
	0xffdd, 0xddc1, 0xdddd, 0xffff, 0xffe3, 0xf7f7,
	0xf7e3, 0xffff, 0xffc1, 0xdfdf, 0xdde3, 0xffff,
	0xffdd, 0xdde1, 0xdddd, 0xffff, 0xfffd, 0xfdfd,
	0xfdc1, 0xffff, 0xffc9, 0xd5dd, 0xdddd, 0xffff,
	0xffdd, 0xd9d5, 0xcddd, 0xffff, 0xffe3, 0xdddd,
	0xdde3, 0xffff, 0xffe1, 0xdde1, 0xfdfd, 0xffff,
	0xffe3, 0xdddd, 0xcdc3, 0xffff, 0xffe1, 0xddc1,
	0xeddd, 0xffff, 0xffc3, 0xfde3, 0xdfe1, 0xffff,
	0xffc1, 0xf7f7, 0xf7f7, 0xffff, 0xffdd, 0xdddd,
	0xdde3, 0xffff, 0xffdd, 0xdddd, 0xebf7, 0xffff,
	0xffdd, 0xdddd, 0xd5c9, 0xffff, 0xffdd, 0xdde3,
	0xdddd, 0xffff, 0xffdd, 0xddeb, 0xf7f7, 0xffff,
	0xffc1, 0xdfe3, 0xfdc1, 0xffff, 0xfff3, 0xfbfb,
	0xfbf3, 0xffff, 0xfffd, 0xfbf7, 0xefdf, 0xffff,
	0xfff3, 0xf7f7, 0xf7f3, 0xffff, 0xfff7, 0xebff,
	0xffff, 0xffff, 0xffff, 0xffff, 0xffc1, 0xffff,
	0xfffb, 0xf7ff, 0xffff, 0xffff, 0xffff, 0xc3dd,
	0xddc3, 0xffff, 0xfffd, 0xfde1, 0xdde1, 0xffff,
	0xffff, 0xc3fd, 0xfdc3, 0xffff, 0xffdf, 0xdfc3,
	0xddc3, 0xffff, 0xffff, 0xe3c1, 0xfdc3, 0xffff,
	0xffe7, 0xfbf3, 0xfbfb, 0xffff, 0xffff, 0xc3dd,
	0xc3df, 0xe3ff, 0xfffd, 0xfde1, 0xdddd, 0xffff,
	0xfff7, 0xfff3, 0xf7e3, 0xffff, 0xffdf, 0xffdf,
	0xdfdd, 0xe3ff, 0xfffd, 0xdde1, 0xdddd, 0xffff,
	0xfffb, 0xfbfb, 0xfbe7, 0xffff, 0xffff, 0xe1d5,
	0xdddd, 0xffff, 0xffff, 0xe1dd, 0xdddd, 0xffff,
	0xffff, 0xe3dd, 0xdde3, 0xffff, 0xffff, 0xe1dd,
	0xe1fd, 0xfdff, 0xffff, 0xc3dd, 0xc3df, 0xdfff,
	0xffff, 0xc5f9, 0xfdfd, 0xffff, 0xffff, 0xc3f9,
	0xc7e1, 0xffff, 0xfffb, 0xf3fb, 0xfbe7, 0xffff,
	0xffff, 0xdddd, 0xdde3, 0xffff, 0xffff, 0xdddd,
	0xebf7, 0xffff, 0xffff, 0xdddd, 0xd5eb, 0xffff,
	0xffff, 0xdde3, 0xdddd, 0xffff, 0xffff, 0xdddd,
	0xc3df, 0xe3ff, 0xffff, 0xc1ef, 0xf3c1, 0xffff,
	0xffe7, 0xf7fb, 0xf7e7, 0xffff, 0xfffb, 0xfbfb,
	0xfbfb, 0xffff, 0xfff3, 0xf7ef, 0xf7f3, 0xffff,
	0xffeb, 0xf5ff, 0xffff, 0xffff, 0xffc1, 0xc1c1,
	0xc1c1, 0xffff
};

const FONT_BITS_PER_PX             =   1;
const FONT_ATLAS_PX_WIDTH          =   8; // The number of pixels in the atlas in the X axis.
const FONT_ATLAS_PX_HEIGHT         = 760; // The number of pixels in the atlas in the Y axis.
const FONT_ATLAS_CHAR_WIDTH_COUNT  =   1; // The number of glyphs in the atlas in the X axis.
const FONT_ATLAS_CHAR_HEIGHT_COUNT =  95; // The number of glyphs in the atlas in the Y axis.
const FONT_CHAR_PX_WIDTH           =   6; // The number of pixels in the glyph in the X axis.
const FONT_CHAR_PX_HEIGHT          =   8; // The number of pixels in the glyph in the Y axis.
const FONT_CHAR_SCANLINES_PER_WORD =   2;
const FONT_CELL_PX_WIDTH           =   8; // The number of pixels in the glyph (including unused pixels) in the X axis.
const FONT_CELL_PX_HEIGHT          =   8; // The number of pixels in the glyph (including unused pixels) in the Y axis.

const FONT_CHAR_ASCII_START =  33;
const FONT_CHAR_ASCII_END   = 126;

const TEXTMODE_CHARS_WIDTH  = VIDEO_PX_WIDTH  / FONT_CHAR_PX_WIDTH;  // The number of glyphs that can fit the X axis given the video dimensions.
const TEXTMODE_CHARS_HEIGHT = VIDEO_PX_HEIGHT / FONT_CHAR_PX_HEIGHT; // The number of glyphs that can fit the Y axis given the video dimensions.

auto TXTMODE_SCROLL_OFFSET = 0; // This can allow the text to scroll by a single line without having to redraw the entire map.

const HWID_KB  = 0x0001; // Hardware ID of keyboard.
const HWID_RDD = 0x0002; // Hardware ID of disk reader.
const HWID_MON = 0x0003; // Hardware ID of monitor.
const HWID_PWR = 0x0004; // Hardware ID of power controller.
const HWID_TTY = 0x0005; // Hardware ID of integrated TTY.

// Monitor message types.
const MON_MSG_PIXMODE              = 0xface; // Sets the monitor mode to direct pixel manipulation.
const MON_MSG_TXTMODE              = 0xbeef; // Sets the monitor mode to text mode which only requires the computer to send font atlas information to the monitor, and then a text map, allowing the monitor to do the rendering.
const MON_MSG_TXTMODE_LOADFONT     = 0xabcd; // Writes the local bitfont to the monitor internal memory for use in text mode.
const MON_MSG_TXTMODE_LOADFONTMETA = 0xaffe; // Writes metadata about the bitfont to the monitor (such as width and height of the atlas, width and height of individual characters, etc.)
const MON_MSG_TXTMODE_SCROLL_DOWN  = 0x123a;
const MON_MSG_TXTMODE_SCROLL_UP    = 0x321b;

const NUM_PORTS = 16;    // The number of ports on this machine.
auto __hwids[NUM_PORTS]; // The hardware ID:s of each port.

d_hwscan( void )
{
	// TODO:
	// We should maybe approach this differently.
	// Instead of identifying the hardware by the first packet on the port, we should flush the entire batch of buffered packets, and get the ID from the last packet.
	// The reason for this is that if we plug in new hardware on a port that already has buffered packets then we misidentify the hardware.
	// Also, this is reaaaaaaally slow when not done asynchronously. Instead, iterate over all unidentified ports constantly for a second or until all ports have been identified. This will take 1 second to do, instead of 16.
	auto i = 0;
	while (i < NUM_PORTS) {
		__hwids[i] = hwid(i);
		++i;
	}
}

const PORT_UNDEF = 0xffff; // The port index of an unfound device.

d_find_hw(id)
{
	auto i = 0;
	while (i < NUM_PORTS && __hwids[i] != id) {
		++i;
	}
	if (i == NUM_PORTS) {
		return PORT_UNDEF;
	}
	return i;
}

auto __port_tty = PORT_UNDEF; // The port index where the TTY device is connected.

d_init_tty( void )
{
	__port_tty = d_find_hw(HWID_TTY);
	if (__port_tty == PORT_UNDEF) {
		return FALSE;
	}
	return TRUE;
}

auto dig10[10] = "0123456789";
auto dig16[16] = "0123456789abcdef";
auto DIG16[16] = "0123456789ABCDEF";

d_outf(port, format, values)
{
	if (port == PORT_UNDEF) { return FALSE; }
	auto start = 0, end = 0, val = 0, esc = FALSE;
	if (values != NULL) {
		while (format[end] != 0) {
			if (esc == TRUE) {
				auto ch = format[end];
				if (ch == 'u') {
					auto num = values[val];
					auto dec[5];
					auto i = 0;
					while (i < 5) {
						dec[4 - i] = dig10[num%10];
						num /= 10;
						++i;
						if (num == 0) {
							break;
						}
					}
					if (!hwpush(port, dec + 5 - i, i, CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 'x' || ch == 'p') {
					auto num = values[val];
					auto hex[6];
					hex[0] = '0';
					hex[1] = 'x';
					auto i = 0;
					while (i < 4) {
						hex[5 - i] = dig16[num%16];
						num /= 16;
						++i;
					}
					if (!hwpush(port, hex, 6, CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 'X') {
					auto num = values[val];
					auto hex[6];
					hex[0] = '0';
					hex[1] = 'x';
					auto i = 0;
					while (i < 4) {
						hex[5 - i] = DIG16[num%16];
						num /= 16;
						++i;
					}
					if (!hwpush(port, hex, 6, CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 'c') {
					if (!hwpush(port, values[val], 1, CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 's') {
					if (!d_outf(port, values[val], NULL)) { return FALSE; }
				} else if (ch == '%') {
					auto escch[] = "%";
					if (!hwpush(port, escch, sizeof(escch), CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 'n') {
				} else {
					auto fmterr[] = "{format}";
					if (!hwpush(port, fmterr, sizeof(fmterr), CLOCKS_PER_SEC)) { return FALSE; }
				}
				++val;
				start = end + 1;
				esc = FALSE;
			} else if (format[end] == '%') {
				if (!hwpush(port, format + start, end - start, CLOCKS_PER_SEC)) { return FALSE; }
				start = end + 1;
				esc = TRUE;
			}
			++end;
		}
		return hwpush(port, format + start, end - start, CLOCKS_PER_SEC);
	}
	while (format[end] != 0) {
		++end;
	}
	return hwpush(port, format + start, end - start, CLOCKS_PER_SEC);
}

d_ttyf(format, values)
{
	return d_outf(__port_tty, format, values);
}

err_stall( void )
{
	auto now = clock();
	auto beep_at = now + CLOCKS_PER_SEC;
	auto wrapped_time = now > beep_at;
	while (TRUE) {
		now = clock();
		if (wrapped_time == FALSE && now > beep_at) {
			auto beep[] = "\a";
			d_ttyf(beep, NULL);
			beep_at = now + CLOCKS_PER_SEC;
			wrapped_time = now > beep_at;
		}
		if (now < beep_at) {
			wrapped_time = FALSE;
		}
	}
}

auto __port_mon = PORT_UNDEF; // The port index where the monitor is connected.

d_require_hw(id)
{
	auto port = d_find_hw(id);
	if (port == PORT_UNDEF) {
		// [ ] Print message if possible
		if (__port_mon == PORT_UNDEF) {
			auto msg[] = "Missing required hardware (%x)\nPlug in hardware and reboot\n";
			auto vals[] = { id };
			d_ttyf(msg, vals); // TODO use d_printf instead
		}
		err_stall();
	}
	return port;
}

const __LINEBUF_MAX = 256;
const __LINEBUF_SIZE = VIDEO_PX_WIDTH / FONT_CHAR_PX_WIDTH;
auto __linebuf[__LINEBUF_MAX];
auto __linebuf_i = 0;

d_init_monitor(mode)
{
	__linebuf_i = 0;

	__port_mon = d_require_hw(HWID_MON);

	auto font_metadata[] = { // Exactly this order.
		FONT_CHAR_PX_WIDTH,
		FONT_CHAR_PX_HEIGHT,
		FONT_ATLAS_CHAR_WIDTH_COUNT,
		FONT_ATLAS_CHAR_HEIGHT_COUNT,
		FONT_CHAR_ASCII_START,
		FONT_CHAR_ASCII_END,
		FONT_CELL_PX_WIDTH,
		FONT_CELL_PX_HEIGHT
	};
	if (
		hwpusht(__port_mon, MON_MSG_TXTMODE, NULL, 0, CLOCKS_PER_SEC)                                           == FALSE ||
		hwpusht(__port_mon, MON_MSG_TXTMODE_LOADFONT, FONT_ATLAS, FONT_ATLAS_SIZE_WORDS, CLOCKS_PER_SEC * 10)   == FALSE ||
		hwpusht(__port_mon, MON_MSG_TXTMODE_LOADFONTMETA, font_metadata, sizeof(font_metadata), CLOCKS_PER_SEC) == FALSE
	) {
		auto msg[] = "Monitor I/O error\n";
		d_ttyf(msg, NULL);
		err_stall();
	}

	return TRUE;
}

d_monf(format, values)
{
	return d_outf(__port_mon, format, values);
}

d_printf(format, values)
{
	return d_monf(format, values) || d_ttyf(format, values);
}

i_print_sys_info( void )
{
	auto newl[] = "\n";

	{
		auto  cycles          = 0;
		auto  kcycles         = 0; // represents every 1,000 cycles.
		auto  mcycles         = 0; // represents every 1,000,000 cycles.
		auto  start           = clock();
		const CYCLES_PER_LOOP = 5679 - 5581; // This is a constant that you get by comparing the number of instructions generated without the loop below vs. with it.

		while (clock() - start < 1000) {
			// We need to bend over backwards to avoid conditional code which impacts the number of cycles we perform every loop.
			cycles  += CYCLES_PER_LOOP;
			kcycles += cycles   / 1000;
			mcycles += kcycles  / 1000;
			cycles  -= (cycles  / 1000) * 1000;
			kcycles -= (kcycles / 1000) * 1000;
		}
		{
			auto s_xerxes[] = "XERXES(tm) Unified Nanocontroller @ ";
			d_printf(s_xerxes, NULL);
			auto s_zero[] = "0";
			auto s_unit[] = "%u.";
			if (mcycles > 0) {
				auto s_mhz[] = "%u MHz\n";
				d_printf(s_unit, &mcycles);
				if (kcycles < 100) { d_printf(s_zero, NULL); }
				if (kcycles < 10)  { d_printf(s_zero, NULL); }
				d_printf(s_mhz, &kcycles);
			} else if (kcycles > 0) {
				auto s_khz[] = "%u KHz\n";
				d_printf(s_unit, &kcycles);
				if (cycles < 100) { d_printf(s_zero, NULL); }
				if (cycles < 10)  { d_printf(s_zero, NULL); }
				d_printf(s_khz, &cycles);
			} else {
				auto s_hz[] = "%u Hz\n";
				d_printf(s_hz, &cycles);
			}
		}
	}

	{
		auto fmt[] = "XERXES(tm) BIOS v%u.%u.%u\n";
		auto vals[] = { BIOS_MAJ_VER, BIOS_MIN_VER, BIOS_HOT_VER };
		d_printf(fmt, vals);
	}

	{
		auto s_ports[] = "Ports:\n";
		auto s_id[]   = "%u: %x\n";
		auto s_noid[]   = "%u: %n\n";
		d_printf(s_ports, NULL);
		auto i = 0;
		while (i < NUM_PORTS) {
			auto vals[] = { i, __hwids[i] };
			if (__hwids[i] != 0) {
				d_printf(s_id, vals);
			} else {
				d_printf(s_noid, vals);
			}
			++i;
		}
	}

	{
		auto ram_remaining;
		asm {
			put 0xffff, $top.
			sub.
			mov ram_remaining.
		}
		auto fmt[] = "RAM available: %u/%u words\n";
		auto vals[] = { ram_remaining, 0xffff };
		d_printf(fmt, vals);
	}
}

auto __port_kb = PORT_UNDEF; // The port index where the keyboard is connected.

d_init_keyboard( void )
{
	__port_kb = d_require_hw(HWID_KB);
}

auto __port_disk = PORT_UNDEF; // The port index where the disk reader is connected.

d_init_diskreader( void )
{
	__port_disk = d_require_hw(HWID_RDD);
}

s_load_bootdisk( void )
{
	// [ ] Load program on the disk
	// [ ] If no disk present print error message, spinloop
}

main(a,b)
{
	d_hwscan();
	d_init_tty();
	d_init_monitor(MON_MSG_TXTMODE);
	i_print_sys_info();
//	d_init_diskreader();
//	d_init_keyboard(); // Not really necessary because BIOS takes no user input
//	s_load_bootdisk();

	while (TRUE) {}

	return EXIT_SUCCESS;
}
