#include <stdlib>

auto __rand_x = 0;     // Random state variable.
auto __rand_y = 0;     // Random state variable.
auto __rand_z = 0;     // Random state variable.
auto __rand_state = 1; // Random state variable.

rand()
{
	auto t = __rand_x ^ (__rand_x << 4);
	__rand_x = __rand_y;
	__rand_y = __rand_z;
	__rand_z = __rand_state;
	__rand_state = __rand_z ^ t ^ (__rand_z >> 1) ^ (t << 1);
	return __rand_state;
}

srand(seed)
{
	__rand_state = seed;
}

malloc(n)
{
	if (n <= 0) {
		return NULL;
	}
	// TODO: More here...
}

calloc(n)
{
	auto mem = malloc(n);
	auto i = 0;
	while (i < n) {
		mem[i] = 0;
		i = i + 1;
	}
	return mem;
}

free(mem)
{
	// TODO IMPL
}

auto __exitfn = NULL; // A custom function called when the program exits.

atexit(fn)
{
	__exitfn = fn;
}

auto __exitlock = 0; // A lock preventing the exit function from being called recursively.

exit(status)
{
	if (__exitlock > 0) {
		return -1;
	}
	__exitlock = __exitlock + 1;
	if (__exitfn != NULL) {
		__exitfn();
	}
	asm {
		// TODO set the 'status' return value
		ldb.
		lda.
		jmp.
	}
	// NOTE: Return instructions here will never be reached.
}

abs(a)
{
	if (a < 0) {
		return -a;
	}
	return a;
}
