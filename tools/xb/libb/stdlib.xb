const NULL = 0;

const EXIT_FAILURE = -1;
const EXIT_SUCCESS =  0;

atof(str);

atoi(str);

rand();
srand(seed);

/// @brief Allocates memory dynamically on the heap.
/// @param n The number of words to allocate.
/// @return A pointer to the allocated memory.
malloc(n)
{
	if (n <= 0) {
		return NULL;
	}
	// TODO: More here...
}

/// @brief Allocates memory dynamically on the heap and sets each memory location to zero.
/// @param n The number of words to allocate.
/// @return A pointer to the allocated memory.
calloc(n)
{
	auto mem = malloc(n);
	auto i = 0;
	while (i < n) {
		mem[i] = 0;
		i = i + 1;
	}
	return mem;
}

/// @brief Frees memory on the heap as pointed to by the input parameter.
/// @param  mem The pointer to the first memory location of the memory allocated by 'malloc' or 'calloc'.
/// @sa malloc
/// @sa calloc
free(mem);

auto __exitfn = NULL;

/// @brief Sets a function to call before the program finally returns execution to the host program.
/// @param  fn The function to call before the program finally returns execution to the host program.
atexit(fn)
{
	__exitfn = fn;
}

auto __exitlock = 0;

/// @brief Exits the current program and returns execution to the host program.
/// @param status The exit status to return to the host program.
/// @return Nothing. However the host program will receive a return value from this program corresponding to 'status'.
exit(status)
{
	if (__exitlock > 0) {
		return -1;
	}
	__exitlock = __exitlock + 1;
	if (__exitfn != NULL) {
		__exitfn();
	}
	asm {
		# TODO set the 'status' return value
		ldb.
		lda.
		jmp.
	}
	// NOTE: Return instructions here will never be reached.
}
